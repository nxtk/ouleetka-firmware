#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    // behaviors {
    //     mm_colon_semicolon: mm_colon_semicolon {
    //         compatible = "zmk,behavior-mod-morph";
    //         label = "MM_COLON_SEMICOLON";
    //         bindings = <&kp COLON>, <&kp SEMICOLON>;

    //         #binding-cells = <0>;
    //         mods = <(MOD_LSFT|MOD_RSFT)>;
    //     };

    //     mm_slash_backslash: mm_slash_backslash {
    //         compatible = "zmk,behavior-mod-morph";
    //         label = "MM_SLASH_BACKSLASH";
    //         bindings = <&kp SLASH>, <&kp BACKSLASH>;

    //         #binding-cells = <0>;
    //         mods = <(MOD_LSFT|MOD_RSFT)>;
    //     };

    //     mm_equal_tilde: mm_equal_tilde {
    //         compatible = "zmk,behavior-mod-morph";
    //         label = "MM_EQUAL_TILDE";
    //         bindings = <&kp EQUAL>, <&kp TILDE>;

    //         #binding-cells = <0>;
    //         mods = <(MOD_LSFT|MOD_RSFT)>;
    //     };

    //     mm_caret_percent: mm_caret_percent {
    //         compatible = "zmk,behavior-mod-morph";
    //         label = "MM_CARET_PERCENT";
    //         bindings = <&kp CARET>, <&kp PERCENT>;

    //         #binding-cells = <0>;
    //         mods = <(MOD_LSFT|MOD_RSFT)>;
    //     };
    // };

    keymap {
        compatible = "zmk,keymap";
            base {
                bindings = <
         &kp Q  &kp W  &kp E  &kp R      &kp T             &kp Y  &kp U      &kp I      &kp O    &kp P
&kp ESC  &kp A  &kp S  &kp D  &kp F      &kp G             &kp H  &kp J      &kp K      &kp L    &kp SEMICOLON  &kp BACKSPACE
&kp TAB  &kp Z  &kp X  &kp C  &kp V      &kp B             &kp N  &kp M      &kp COMMA  &kp DOT  &kp SLASH      &kp BACKSPACE
                       &none  &kp SPACE  &kp LEFT_SHIFT    &kp LEFT_CONTROL  &mo 1  &kp ENTER
            >;

            label = "QWERTY";
        };

//         base {
//             bindings = <
//          &kp B  &kp L  &kp D  &kp W      &kp Z           &kp J             &kp F  &kp O      &kp U    &mm_colon_semicolon
// &kp ESC  &kp N  &kp R  &kp T  &kp S      &kp G           &kp Y             &kp H  &kp A      &kp E    &kp I                &kp BACKSPACE
// &kp TAB  &kp Q  &kp X  &kp M  &kp C      &kp V           &kp K             &kp P  &kp COMMA  &kp DOT  &mm_slash_backslash  &kp LALT
//                        &mo 2  &kp SPACE  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &mo 1  &kp ENTER
//             >;

//             label = "BASE";
//         };

//         sym_num {
//             bindings = <
//          &kp QUESTION   &kp EXCLAMATION    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &mm_equal_tilde    &kp FSLH      &kp N4  &kp N5   &kp N6  &kp PLUS
// &kp ESC  &kp SQT        &kp DOUBLE_QUOTES  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp UNDERSCORE     &kp N0        &kp N1  &kp N2   &kp N3  &kp DOT    &kp BSPC
// &kp TAB  &kp LESS_THAN  &kp GREATER_THAN   &kp LBKT              &kp RBKT               &mm_caret_percent  &kp ASTERISK  &kp N7  &kp N8   &kp N9  &kp MINUS  &kp LEFT_ALT
//                                            &mo 2                 &kp SPACE              &kp LSHIFT         &kp LCTRL     &mo 1   &kp RET
//             >;

//             label = "SYM & NUM";
//         };

//         nav {
//             bindings = <
//             &kp LG(LS(NUMBER_5))  &kp LG(LS(NUMBER_4))  &kp LG(LS(NUMBER_3))  &kp LG(LS(NUMBER_2))  &kp LG(LS(NUMBER_1))  &kp INSERT  &kp HOME        &kp PAGE_UP     &kp PAGE_DOWN  &kp END
// &kp ESCAPE  &kp LG(LS(L))         &kp LG(C)             &kp LG(LS(M))         &kp LG(LS(S))         &kp LG(LS(R))         &kp DELETE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT_ARROW  &kp BACKSPACE
// &kp TAB     &none                 &none                 &kp LG(LS(U))         &kp LG(LS(I))         &kp LG(LS(Q))         &kp DOLLAR  &kp HASH        &kp AMPERSAND   &kp PIPE       &kp AT           &kp LEFT_ALT
//                                                         &mo 2                 &kp SPACE             &kp LEFT_SHIFT        &kp LCTRL   &mo 1           &kp ENTER
//             >;

//             label = "NAV";
//         };

//         fn {
//             bindings = <
//             &kp F1          &kp F2           &kp F3           &kp F4   &kp F5   &kp LG(LS(PG_UP))      &kp K_VOLUME_UP    &kp K_NEXT        &out OUT_TOG  &bt BT_SEL 0
// &kp ESCAPE  &kp F6          &kp F7           &kp F8           &kp F9   &kp F10  &kp LG(LS(PAGE_DOWN))  &kp K_VOLUME_DOWN  &kp K_PREV        &none         &bt BT_SEL 1  &bootloader
// &kp TAB     &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp PRINTSCREEN  &kp F11  &kp F12  &kp CAPSLOCK           &kp K_MUTE         &kp K_PLAY_PAUSE  &none         &bt BT_CLR    &sys_reset
//                                              &none            &none    &none    &none                  &none              &none
//             >;

//             label = "FN";
//         };
    };
};
